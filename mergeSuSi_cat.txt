<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_ (OTHERS)
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()> -> _SOURCE_ (NO_CATEGORY)
<android.location.Location: double getLatitude()> -> _SOURCE_ (LOCATION_INFORMATION)
<android.location.Location: double getLongitude()> -> _SOURCE_ (LOCATION_INFORMATION)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_ (LOCATION_INFORMATION)
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> android.permission.READ_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> android.permission.READ_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<java.net.URLConnection: void connect()> -> _SINK_ (NO_CATEGORY)
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _BOTH_ (NO_CATEGORY)
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_ (NO_CATEGORY)
<java.net.URL: java.io.InputStream openStream()> -> _BOTH_ (NO_CATEGORY)
<java.net.URL: java.lang.Object getContent()> -> _BOTH_ (NO_CATEGORY)
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _BOTH_ (NO_CATEGORY)
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putByte(java.lang.String,byte)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putChar(java.lang.String,char)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putDouble(java.lang.String,double)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putInt(java.lang.String,int)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putLong(java.lang.String,long)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putLongArray(java.lang.String,long[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putShort(java.lang.String,short)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_ (NO_CATEGORY)
<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.media.AudioRecord: int read(short[],int,int)> -> _SOURCE_ (OTHERS)
<android.media.AudioRecord: int read(byte[],int,int)> -> _SOURCE_ (OTHERS)
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)> -> _SOURCE_ (OTHERS)
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)> -> _SOURCE_ (OTHERS)
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)> -> _SOURCE_ (OTHERS)
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> -> _SOURCE_ (NO_CATEGORY)
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)> -> _SOURCE_ (NO_CATEGORY)
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> -> _SOURCE_ (NO_CATEGORY)
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SOURCE_ (NO_CATEGORY)
<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ (NO_CATEGORY)
<java.io.OutputStream: void write(byte[])> -> _SINK_ (NO_CATEGORY)
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_ (NO_CATEGORY)
<java.io.OutputStream: void write(int)> -> _SINK_ (NO_CATEGORY)
<java.io.FileOutputStream: void write(byte[])> -> _SINK_ (OTHERS)
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_ (OTHERS)
<java.io.FileOutputStream: void write(int)> -> _SINK_ (OTHERS)
<java.io.Writer: void write(char[])> -> _SINK_ (NO_CATEGORY)
<java.io.Writer: void write(char[],int,int)> -> _SINK_ (NO_CATEGORY)
<java.io.Writer: void write(int)> -> _SINK_ (NO_CATEGORY)
<java.io.Writer: void write(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_ (NO_CATEGORY)
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_ (NO_CATEGORY)
<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_ (NO_CATEGORY)
<android.content.Intent: android.content.Intent setAction(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.Class)> -> _SINK_ (NO_CATEGORY)
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> -> _SINK_ (NO_CATEGORY)
<android.content.Context: void sendBroadcast(android.content.Intent)> -> _SINK_ (NO_CATEGORY)
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.media.MediaRecorder: void setVideoSource(int)> -> _SINK_ (NO_CATEGORY)
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> -> _SINK_ (NO_CATEGORY)
<android.media.MediaRecorder: void start()> -> _SINK_ (NO_CATEGORY)
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_ (NO_CATEGORY)
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_ (NO_CATEGORY)
<android.content.IntentFilter: void addAction(java.lang.String)> -> _SINK_ (OTHERS)
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_ (OTHERS)
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_ (OTHERS)
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS -> _SINK_ (OTHERS)
<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_ (OTHERS)
<android.os.Handler: boolean sendMessage(android.os.Message)> -> _SINK_ (OTHERS)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_ (OTHERS)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_ (OTHERS)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_ (OTHERS)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_ (OTHERS)
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_ (OTHERS)
<android.content.SharedPreferences: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> -> _SOURCE_ (OTHERS)
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SOURCE_ (USER_IDENTIFIERS)
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()> -> _SOURCE_ (UNIQUE_IDENTIFIER)
<java.util.Locale: java.lang.String getCountry()> -> _SOURCE_ (USER_IDENTIFIERS)
<android.net.wifi.WifiInfo: java.lang.String getSSID()> -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.gsm.GsmCellLocation: int getCid()> -> _SOURCE_ (LOCATION_INFORMATION)
<android.telephony.gsm.GsmCellLocation: int getLac()> -> _SOURCE_ (LOCATION_INFORMATION)
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_ (USER_IDENTIFIERS)
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SOURCE_ (OTHERS)
<android.provider.Browser: android.database.Cursor getAllBookmarks()> -> _SOURCE_ (USER_IDENTIFIERS)
<android.provider.Browser: android.database.Cursor getAllVisitedUrls()> -> _SOURCE_ (USER_IDENTIFIERS)
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_ (NO_CATEGORY)
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_ (NO_CATEGORY)
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_ (NO_CATEGORY)
<android.content.Context: void startActivities(android.content.Intent[])> -> _SINK_ (NO_CATEGORY)
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.content.Context: android.content.ComponentName startService(android.content.Intent)> -> _SINK_ (NO_CATEGORY)
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void setResult(int,android.content.Intent)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivities(android.content.Intent[])> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: android.content.ComponentName startService(android.content.Intent)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendBroadcast(android.content.Intent)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ (NO_CATEGORY)
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_ (NO_CATEGORY)
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_ (NO_CATEGORY)
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_ (NO_CATEGORY)
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_ (NO_CATEGORY)
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_ (NO_CATEGORY)
<android.database.Cursor: java.lang.String getString(int)> -> _SOURCE_ (OTHERS)
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_ (OTHERS)
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_ (OTHERS)
<java.lang.ProcessBuilder: java.lang.Process start()> -> _SINK_ (NO_CATEGORY)
<android.telephony.TelephonyManager: java.lang.String setLine1NumberForDisplay()> android.permission.READ_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getImei()> android.permission.READ_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication()> android.permission.READ_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> android.permission.READ_PRIVILEGED_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> android.permission.READ_PRIVILEGED_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> android.permission.READ_PRIVILEGED_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PRIVILEGED_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String setLine1NumberForDisplay()> android.permission.READ_PRIVILEGED_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getImei()> android.permission.READ_PRIVILEGED_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication()> android.permission.READ_PRIVILEGED_PHONE_STATE -> _SOURCE_ (UNIQUE_IDENTIFIER)
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> -> _SOURCE_ (OTHERS)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> -> _SOURCE_ (USER_IDENTIFIERS)
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS -> _SOURCE_ (USER_IDENTIFIERS)
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_ (USER_IDENTIFIERS)
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()> -> _SOURCE_ (NO_CATEGORY)
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> android.permission.GET_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> -> _SOURCE_ (NO_CATEGORY)
<com.google.android.picasasync.Authorizer: java.lang.String getAuthToken(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.AUTHENTICATE_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(android.accounts.AccountManagerService$UserAccounts,java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: java.util.HashMap access$1300(android.accounts.AccountManager)> -> _SOURCE_ (NO_CATEGORY)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)> -> _SOURCE_ (NO_CATEGORY)
<com.google.android.picasasync.Authorizer: java.lang.String getFreshAuthToken(java.lang.String,java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: android.accounts.AccountManagerService getSingleton()> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService$Session: android.accounts.IAccountManagerResponse getResponseAndClose()> -> _SOURCE_ (NO_CATEGORY)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.AUTHENTICATE_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getRunningAccounts()> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: android.accounts.AccountManagerService$UserAccounts getUserAccounts(int)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.os.Handler access$600(android.accounts.AccountManager)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> android.permission.GET_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.IAccountManager access$000(android.accounts.AccountManager)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> -> _SOURCE_ (NO_CATEGORY)
<android.accounts.AccountManagerService$Session: java.lang.String toDebugString()> -> _SOURCE_ (NO_CATEGORY)
<javax.servlet.ServletRequest: java.lang.String getParameter(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(java.lang.String,java.lang.Class)> -> _SINK_ (NO_CATEGORY)
<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<java.io.File: boolean delete()> -> _SINK_ (NO_CATEGORY)
<org.apache.xalan.xsltc.runtime.BasisLibrary: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_ (NO_CATEGORY)
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameters(java.util.Map)> -> _SINK_ (NO_CATEGORY)
<org.apache.axis2.description.AxisService: void printWSDLError(java.io.OutputStream)> -> _SINK_ (NO_CATEGORY)
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameter(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(char[])> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection,java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<net.sourceforge.pebble.domain.Comment: void setAuthenticated(boolean)> -> _SINK_ (NO_CATEGORY)
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.server.ReflectiveXmlRpcHandler: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_ (NO_CATEGORY)
<com.mysql.jdbc.Statement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.springframework.test.context.transaction.TransactionalTestExecutionListener: void runAfterTransactionMethods(org.springframework.test.context.TestContext)> -> _SINK_ (NO_CATEGORY)
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.XmlRpcServlet: void log(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.apache.stratos.cli.StratosApplication: int run(java.lang.String[])> -> _SINK_ (NO_CATEGORY)
<org.owasp.webgoat.session.ParameterParser: void update(javax.servlet.ServletRequest)> -> _SINK_ (NO_CATEGORY)
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.CharSequence)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)> -> _SINK_ (NO_CATEGORY)
<org.apache.bcel.util.JavaWrapper: void runMain(java.lang.String,java.lang.String[])> -> _SINK_ (NO_CATEGORY)
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.Object parse(java.lang.String,java.util.Locale)> -> _SINK_ (NO_CATEGORY)
<org.apache.xerces.impl.xs.models.XSDFACM: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)> -> _SINK_ (NO_CATEGORY)
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_ (NO_CATEGORY)
<org.owasp.webgoat.session.DatabaseUtilities: java.sql.Connection getHsqldbConnection(java.lang.String,org.owasp.webgoat.session.WebgoatContext)> -> _SINK_ (NO_CATEGORY)
<org.springframework.jdbc.core.JdbcTemplate: void execute(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.springframework.mock.web.MockBodyContent: void println(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.owasp.webgoat.HammerHead: void log(javax.servlet.http.HttpServletRequest,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_ (NO_CATEGORY)
<org.owasp.webgoat.session.LessonSession: void setAuthenticated(boolean)> -> _SINK_ (NO_CATEGORY)
<org.springframework.orm.hibernate3.support.ClobStringType: int[] sqlTypes)> -> _SINK_ (NO_CATEGORY)
<org.owasp.webgoat.session.WebSession: void update(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.WebServer: void setParanoid(boolean)> -> _SINK_ (NO_CATEGORY)
<com.novell.ldap.rfc2251.RfcFilter: void addSubstring(int,byte[])> -> _SINK_ (NO_CATEGORY)
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)> -> _SINK_ (NO_CATEGORY)
<org.xmldb.api.base.XMLDBException: void printStackTrace(java.io.PrintWriter)> -> _SINK_ (NO_CATEGORY)
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)> -> _SINK_ (NO_CATEGORY)
<org.apache.xerces.impl.xpath.regex.REUtil: void dumpString(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.apache.xalan.xsltc.compiler.util.Util: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_ (NO_CATEGORY)
<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_ (NO_CATEGORY)
<org.apache.commons.validator.util.ValidatorUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<com.google.json.JsonSanitizer: void replace(int,int,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.owasp.esapi.reference.validation.StringValidationRule: void addBlacklistPattern(java.util.regex.Pattern)> -> _SINK_ (NO_CATEGORY)
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.CharSequence,int,int)> -> _SINK_ (NO_CATEGORY)
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> -> _SINK_ (NO_CATEGORY)
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)> -> _SINK_ (NO_CATEGORY)
<org.springframework.security.util.FieldUtils: void setProtectedFieldValue(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_ (NO_CATEGORY)
<org.springframework.mock.web.MockBodyContent: void println(char[])> -> _SINK_ (NO_CATEGORY)
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: void runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)> -> _SINK_ (NO_CATEGORY)
<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)> -> _SINK_ (NO_CATEGORY)
<org.springframework.orm.hibernate3.TypeDefinitionBean: void setParameters(java.util.Properties)> -> _SINK_ (NO_CATEGORY)
<org.springframework.format.datetime.joda.DateTimeParser: org.joda.time.DateTime parse(java.lang.String,java.util.Locale)> -> _SINK_ (NO_CATEGORY)
<org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> -> _SINK_ (NO_CATEGORY)
<org.springframework.mock.web.MockJspWriter: void println(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.apache.xalan.templates.ElemTemplateElement: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> -> _SINK_ (NO_CATEGORY)
<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> -> _SINK_ (NO_CATEGORY)
<com.github.scribejava.core.oauth.OAuth20Service: com.github.scribejava.core.model.OAuth2AccessToken sendAccessTokenRequestSync(com.github.scribejava.core.model.OAuthRequest)> -> _SINK_ (NO_CATEGORY)
<com.github.scribejava.core.oauth.OAuth20Service: java.util.concurrent.Future sendAccessTokenRequestAsync(com.github.scribejava.core.model.OAuthRequestAsync,com.github.scribejava.core.model.OAuthAsyncRequestCallback)> -> _SINK_ (NO_CATEGORY)
<org.apache.xmlrpc.client.XmlRpcClient: java.lang.Object execute(java.lang.String,java.lang.Object[])> -> _SINK_ (NO_CATEGORY)
<java.lang.Runtime: java.lang.Process exec(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.apache.xpath.jaxp.XPathImpl: javax.xml.xpath.XPathExpression compile(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.jsoup.nodes.Node: org.jsoup.nodes.Node before(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.jsoup.nodes.Node: org.jsoup.nodes.Node after(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)> -> _SINK_ (NO_CATEGORY)
<org.springframework.security.config.http.CsrfBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getCsrfLogoutHandler)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.security.config.authentication.CachingUserDetailsService: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper: org.springframework.security.core.userdetails.UserDetails loadUserDetails(org.springframework.security.core.Authentication)> -> _SOURCE_ (NO_CATEGORY)
<java.io.File: java.io.File getAbsoluteFile)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.commons.jxpath.ri.parser.XPathParser: java.lang.String unescape(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginPage)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: java.lang.String getRealPath(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<com.google.auth.oauth2.UserCredentials: java.lang.String getClientSecret)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createQueryString(java.util.List,java.util.Set,boolean)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.messaging.simp.stomp.StompDecoder: java.lang.String unescape(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl)> -> _SOURCE_ (NO_CATEGORY)
<java.io.File: java.io.File getCanonicalFile)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.commons.jxpath.ri.JXPathContextReferenceImpl: java.lang.Object getValue(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.RequestData: java.lang.String getMethod)> -> _SOURCE_ (NO_CATEGORY)
<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentials(com.google.api.client.http.HttpTransport)> -> _SOURCE_ (NO_CATEGORY)
<org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.util.DefaultPropertiesPersister: java.lang.String unescape(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.owasp.webgoat.plugins.Plugin: void loadFiles(java.nio.file.Path)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.HttpServletResponseImpl: java.lang.String getHeader(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentialsFromCode(java.lang.String,java.net.URI)> -> _SOURCE_ (NO_CATEGORY)
<org.dmfs.oauth2.client.http.requests.ResourceOwnerPasswordTokenRequest: org.dmfs.httpclient.HttpRequestEntity requestEntity)> -> _SOURCE_ (NO_CATEGORY)
<org.owasp.webgoat.util.HtmlEncoder: java.lang.String decode(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<javax.naming.ldap.Rdn: java.lang.Object unescapeValue(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.XmlRpcServletServer: org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl getConfig(javax.servlet.http.HttpServletRequest)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: void parsePostData(java.util.Map,java.io.InputStream,java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.security.concurrent.DelegatingSecurityContextExecutorService: java.util.concurrent.ExecutorService getDelegate)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.configurers.HeadersConfigurer headers)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.web.servlet.tags.EscapeBodyTag: java.lang.String readBodyContent)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.web.util.UrlPathHelper: java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest,java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder requestAttr(java.lang.String,java.lang.Object)> -> _SOURCE_ (NO_CATEGORY)
<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentials(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.web.socket.sockjs.transport.handler.JsonpReceivingTransportHandler: java.lang.String[] readMessages(org.springframework.http.server.ServerHttpRequest)> -> _SOURCE_ (NO_CATEGORY)
<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentialsUnsynchronized(com.google.api.client.http.HttpTransport)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginProcessingUrl)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: java.lang.String readLine(byte[])> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.security.config.http.LogoutBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getLogoutRequestMatcher(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: java.util.List getLogoutHandlers)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.RequestData: java.lang.String getHttpVersion)> -> _SOURCE_ (NO_CATEGORY)
<com.novell.ldap.rfc2251.RfcFilter: byte[] unescapeString(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> -> _SOURCE_ (NO_CATEGORY)
<com.google.auth.oauth2.DefaultCredentialsProvider: java.io.File getWellKnownCredentialsFile)> -> _SOURCE_ (NO_CATEGORY)
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: void parseParameters)> -> _SOURCE_ (NO_CATEGORY)
<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)> -> _SOURCE_ (NO_CATEGORY)
<android.provider.Settings.Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_ (UNIQUE_IDENTIFIER)
<androidx.ads.identifier.AdvertisingIdClient: androidx.ads.identifier.AdvertisingIdInfo getAdvertisingIdInfo(android.content.Context)> -> _SOURCE_ (UNIQUE_IDENTIFIER)
